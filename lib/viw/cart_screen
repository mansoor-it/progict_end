import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../model/model_cart.dart';
import '../service/server_cart.dart';

class CartPage extends StatefulWidget {
	final String userId;

	const CartPage({Key? key, required this.userId}) : super(key: key);

	@override
	_CartPageState createState() => _CartPageState();
}

class _CartPageState extends State<CartPage> {
	late CartController _controller;
	late Future<List<CartItemModel>> _cartFuture;

	@override
	void initState() {
		super.initState();
		_controller = CartController();
		_cartFuture = _controller.fetchCartItems(widget.userId);
	}

	void _refresh() {
		setState(() {
			_cartFuture = _controller.fetchCartItems(widget.userId);
		});
	}

	@override
	Widget build(BuildContext context) {
		return Scaffold(
			appBar: AppBar(
				title: const Text('سلة المشتريات'),
				actions: [
					IconButton(
						icon: const Icon(Icons.refresh),
						onPressed: _refresh,
					),
				],
			),
			body: FutureBuilder<List<CartItemModel>>(
				future: _cartFuture,
				builder: (context, snapshot) {
					if (snapshot.connectionState == ConnectionState.waiting) {
						return const Center(child: CircularProgressIndicator());
					}
					if (snapshot.hasError) {
						return Center(child: Text('خطأ: \${snapshot.error}'));
					}
					final items = snapshot.data!;
					if (items.isEmpty) {
						return const Center(child: Text('السلة فارغة'));
					}

					double total = items.fold(0, (sum, item) => sum + double.parse(item.totalPrice));

					return Column(
						children: [
							Expanded(
								child: ListView.builder(
									itemCount: items.length,
									itemBuilder: (context, index) {
										final item = items[index];
										final bytes = item.productImage != null
												? base64Decode(item.productImage!)
												: null;
										return Card(
											margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
											child: ListTile(
												leading: bytes != null
														? Image.memory(bytes, width: 50, height: 50, fit: BoxFit.cover)
														: const Icon(Icons.image_not_supported),
												title: Text(item.productId),
												subtitle: Column(
													crossAxisAlignment: CrossAxisAlignment.start,
													children: [
														Text('سعر الوحدة: \${item.unitPrice}'),
														Text('الكمية: \${item.quantity}'),
														Text('الإجمالي: \${item.totalPrice}'),
													],
												),
												trailing: IconButton(
													icon: const Icon(Icons.delete, color: Colors.red),
													onPressed: () async {
														bool ok = await _controller.deleteCartItem(item.id);
														if (ok) {
															ScaffoldMessenger.of(context).showSnackBar(
																const SnackBar(content: Text('تم حذف العنصر')),
															);
															_refresh();
														} else {
															ScaffoldMessenger.of(context).showSnackBar(
																const SnackBar(content: Text('فشل الحذف')),
															);
														}
													},
												),
											),
										);
									},
								),
							),
							Container(
								padding: const EdgeInsets.all(16),
								child: Row(
									mainAxisAlignment: MainAxisAlignment.spaceBetween,
									children: [
										Text('الإجمالي: \$${total.toStringAsFixed(2)}', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
										ElevatedButton(
											onPressed: () {
												// تابع عملية الدفع أو تأكيد الطلب
											},
											child: const Text('تأكيد الطلب'),
										),
									],
								),
							),
						],
					);
				},
			),
		);
	}
}
